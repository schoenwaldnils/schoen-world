name: schoen-world

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: lint ts
        run: pnpm lint:ts

      - name: lint types
        run: pnpm lint:types

  build:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      CONTENTFUL_MANAGEMENT_TOKEN: ${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: build
        run: pnpm build

  # visual-regression-test:
  #   runs-on: ubuntu-latest
  #   env:
  #     PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         run_install: false

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: '.nvmrc'
  #         cache: 'pnpm'

  #     - name: Install dependencies
  #       run: pnpm install

  #     - name: Percy Test
  #       uses: percy/storybook-action@v0.1.6
  #       env:
  #         PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
  #       with:
  #         custom-command: 'pnpm snapshot'

  # lighthouse-check:
  #   runs-on: ubuntu-latest
  #   if: github.ref != 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Get deployment URL
  #       id: deployment
  #       uses: schoenwaldnils/get-deployment-url@master
  #       timeout-minutes: 10
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Wait for Deployment
  #       uses: UnlyEd/github-action-await-vercel@v1.1.0
  #       id: await-vercel
  #       env:
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  #       with:
  #         deployment-url: ${{ steps.deployment.outputs.deployment }}
  #         timeout: 600 # Wait for 10 minutes before failing

  #     - name: Run Lighthouse
  #       uses: foo-software/lighthouse-check-action@v1.0.10
  #       id: lighthouseCheck
  #       with:
  #         accessToken: ${{ secrets.GITHUB_TOKEN }}
  #         author: ${{ github.actor }}
  #         awsBucket: ${{ secrets.AWS_S3_BUCKET_LIGHTHOUSE }}
  #         awsRegion: 'eu-central-1'
  #         awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         branch: ${{ github.ref }}
  #         urls: 'https://${{ steps.deployment.outputs.deployment }},https://${{ steps.deployment.outputs.deployment }}/blog,https://${{ steps.deployment.outputs.deployment }}/blog/test'
  #         sha: ${{ github.sha }}

  #     - name: Handle Lighthouse Check results
  #       uses: foo-software/lighthouse-check-status-action@master
  #       with:
  #         lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
  #         minAccessibilityScore: '90'
  #         minBestPracticesScore: '80'
  #         minPerformanceScore: '80'
  #         minProgressiveWebAppScore: '50'
  #         minSeoScore: '80'
